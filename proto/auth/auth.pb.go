// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth.proto

It has these top-level messages:
	User
	RegisterRequest
	RegisterResponse
	Certificate
	Result
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CertificateType int32

const (
	CertificateType_UUID     CertificateType = 0
	CertificateType_PLAIN    CertificateType = 1
	CertificateType_TOKEN    CertificateType = 2
	CertificateType_FACEBOOK CertificateType = 3
)

var CertificateType_name = map[int32]string{
	0: "UUID",
	1: "PLAIN",
	2: "TOKEN",
	3: "FACEBOOK",
}
var CertificateType_value = map[string]int32{
	"UUID":     0,
	"PLAIN":    1,
	"TOKEN":    2,
	"FACEBOOK": 3,
}

func (x CertificateType) String() string {
	return proto.EnumName(CertificateType_name, int32(x))
}
func (CertificateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type User struct {
	UserId     uint64 `protobuf:"varint,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=Password,json=password" json:"Password,omitempty"`
	DeviceName string `protobuf:"bytes,4,opt,name=DeviceName,json=deviceName" json:"DeviceName,omitempty"`
	DeviceId   string `protobuf:"bytes,5,opt,name=DeviceId,json=deviceId" json:"DeviceId,omitempty"`
	DeviceType int32  `protobuf:"varint,6,opt,name=DeviceType,json=deviceType" json:"DeviceType,omitempty"`
	OpenUUID   string `protobuf:"bytes,7,opt,name=OpenUUID,json=openUUID" json:"OpenUUID,omitempty"`
	Lang       string `protobuf:"bytes,8,opt,name=Lang,json=lang" json:"Lang,omitempty"`
	LoginIP    string `protobuf:"bytes,9,opt,name=LoginIP,json=loginIP" json:"LoginIP,omitempty"`
	Created    int64  `protobuf:"varint,10,opt,name=Created,json=created" json:"Created,omitempty"`
	Updated    int64  `protobuf:"varint,11,opt,name=Updated,json=updated" json:"Updated,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RegisterRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Certificate struct {
	Type  CertificateType `protobuf:"varint,1,opt,name=Type,json=type,enum=auth.CertificateType" json:"Type,omitempty"`
	Proof []byte          `protobuf:"bytes,2,opt,name=Proof,json=proof,proto3" json:"Proof,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Result struct {
	OK     bool   `protobuf:"varint,1,opt,name=OK,json=oK" json:"OK,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	Body   []byte `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"Body,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*RegisterRequest)(nil), "auth.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "auth.RegisterResponse")
	proto.RegisterType((*Certificate)(nil), "auth.Certificate")
	proto.RegisterType((*Result)(nil), "auth.Result")
	proto.RegisterEnum("auth.CertificateType", CertificateType_name, CertificateType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*Result, error)
	Auth(ctx context.Context, in *Certificate, opts ...client.CallOption) (*Result, error)
}

type authClient struct {
	c           client.Client
	serviceName string
}

func NewAuthClient(serviceName string, c client.Client) AuthClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &authClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *authClient) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Register", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Auth(ctx context.Context, in *Certificate, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Auth", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	Register(context.Context, *RegisterRequest, *Result) error
	Auth(context.Context, *Certificate, *Result) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Auth{hdlr}, opts...))
}

type Auth struct {
	AuthHandler
}

func (h *Auth) Register(ctx context.Context, in *RegisterRequest, out *Result) error {
	return h.AuthHandler.Register(ctx, in, out)
}

func (h *Auth) Auth(ctx context.Context, in *Certificate, out *Result) error {
	return h.AuthHandler.Auth(ctx, in, out)
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x52, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x25, 0xa9, 0x93, 0xa6, 0xb7, 0xd5, 0x16, 0xae, 0x00, 0x59, 0x7b, 0x98, 0xaa, 0xbc, 0x50,
	0x78, 0x18, 0xa2, 0xfc, 0x00, 0xd4, 0xb5, 0x43, 0x8a, 0x5a, 0x35, 0x95, 0xb5, 0xbe, 0x93, 0xd5,
	0x5e, 0x17, 0xa9, 0xc4, 0x21, 0x71, 0x40, 0xfd, 0x57, 0xfc, 0x44, 0x74, 0xed, 0x94, 0x7d, 0xf0,
	0x14, 0x9f, 0x73, 0x7c, 0x6e, 0x72, 0xce, 0x0d, 0x40, 0xde, 0x9a, 0x87, 0xab, 0xaa, 0xd6, 0x46,
	0x23, 0xa3, 0x73, 0xf2, 0xc7, 0x07, 0xb6, 0x6d, 0x54, 0x8d, 0xef, 0x20, 0xa4, 0x67, 0x2a, 0xb9,
	0x37, 0xf6, 0x26, 0x4c, 0x84, 0xad, 0x45, 0x78, 0x01, 0x11, 0xf1, 0xeb, 0xfc, 0x87, 0xe2, 0xfe,
	0xd8, 0x9b, 0x0c, 0x44, 0xd4, 0x76, 0x98, 0xb4, 0x4d, 0xde, 0x34, 0xbf, 0x75, 0x2d, 0x79, 0xcf,
	0x69, 0x55, 0x87, 0xf1, 0x12, 0x60, 0xa1, 0x7e, 0x15, 0x3b, 0x65, 0x9d, 0xcc, 0xaa, 0x20, 0xff,
	0x31, 0xe4, 0x75, 0x7a, 0x2a, 0x79, 0xe0, 0xbc, 0xb2, 0xc3, 0x8f, 0xde, 0xdb, 0x63, 0xa5, 0x78,
	0x38, 0xf6, 0x26, 0xc1, 0xc9, 0x4b, 0x0c, 0x79, 0xb3, 0x4a, 0x95, 0xdb, 0x6d, 0xba, 0xe0, 0x7d,
	0xe7, 0xd5, 0x1d, 0x46, 0x04, 0xb6, 0xca, 0xcb, 0x3d, 0x8f, 0x2c, 0xcf, 0x0e, 0x79, 0xb9, 0x47,
	0x0e, 0xfd, 0x95, 0xde, 0x17, 0x65, 0xba, 0xe1, 0x03, 0x4b, 0xf7, 0x0f, 0x0e, 0x92, 0x32, 0xaf,
	0x55, 0x6e, 0x94, 0xe4, 0x30, 0xf6, 0x26, 0x3d, 0xd1, 0xdf, 0x39, 0x48, 0xca, 0xb6, 0x92, 0x56,
	0x19, 0x3a, 0xa5, 0x75, 0x30, 0xf9, 0x0c, 0xe7, 0x42, 0xed, 0x8b, 0xc6, 0xa8, 0x5a, 0xa8, 0x9f,
	0xad, 0x6a, 0x0c, 0x5e, 0x02, 0xa3, 0x52, 0x6c, 0x75, 0xc3, 0x29, 0x5c, 0xd9, 0x9a, 0xa9, 0x36,
	0x61, 0xf9, 0x04, 0x21, 0x7e, 0xb4, 0x34, 0x95, 0x2e, 0x1b, 0x95, 0xac, 0x61, 0x38, 0x57, 0xb5,
	0x29, 0xee, 0x8b, 0x5d, 0x6e, 0x14, 0x7e, 0x00, 0x66, 0xd3, 0xd2, 0x88, 0xb3, 0xe9, 0x5b, 0x37,
	0xe2, 0xc9, 0x05, 0x12, 0x05, 0x33, 0x14, 0xff, 0x0d, 0x04, 0x9b, 0x5a, 0xeb, 0x7b, 0xbb, 0x8f,
	0x91, 0x08, 0x2a, 0x02, 0xc9, 0x02, 0x42, 0xa1, 0x9a, 0xf6, 0x60, 0xf0, 0x0c, 0xfc, 0x6c, 0x69,
	0x07, 0x45, 0xc2, 0xd7, 0xcb, 0x27, 0xab, 0xf5, 0x9f, 0xad, 0x16, 0x81, 0x5d, 0x6b, 0x79, 0xb4,
	0xab, 0x1b, 0x09, 0x76, 0xa7, 0xe5, 0xf1, 0xe3, 0x57, 0x38, 0x7f, 0xf1, 0x52, 0x8c, 0x80, 0x51,
	0xb3, 0xf1, 0x2b, 0x1c, 0x40, 0xb0, 0x59, 0xcd, 0xd2, 0x75, 0xec, 0xd1, 0xf1, 0x36, 0x5b, 0xde,
	0xac, 0x63, 0x1f, 0x47, 0x10, 0x7d, 0x9b, 0xcd, 0x6f, 0xae, 0xb3, 0x6c, 0x19, 0xf7, 0xa6, 0xdf,
	0x81, 0xcd, 0x5a, 0xf3, 0x80, 0x9f, 0x20, 0x3a, 0x45, 0xc6, 0x2e, 0xcd, 0x8b, 0xd6, 0x2e, 0x46,
	0x27, 0xda, 0x7e, 0xf5, 0xfb, 0xce, 0xf8, 0xfa, 0xbf, 0xe8, 0xcf, 0x2f, 0xde, 0x85, 0xf6, 0xff,
	0xfd, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x3f, 0xd0, 0xc5, 0xcd, 0x02, 0x00, 0x00,
}
